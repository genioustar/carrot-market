// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  // User 모델와 relation이 있는 애들은 아래처럼 계속 추가해줘야함! 왜냐면 user는 관계가 있는 테이블을 가르킬수 있어야되기 때문
  tokens          Token[]
  products        Product[]
  fav             Fav[]
  posts           Post[]
  answers         Answer[]
  curiosity       Curiosity[]
  writtenReviews  Review[]    @relation(name: "writtenReviews") //reivew가 쓴놈 받는놈이 나눠져 있기 때문에 User에서도 어떤 User를 말하는지를 @relation의 name이라는 값으로 구분한다!
  receivedReviews Review[]    @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  records         Record[] // Fav, sales, purchases 를 합쳐놓은것!
  streams         Stream[]
  messages        Message[]
  chatFrom        Chat[]      @relation(name: "chatFrom")
  chatTo          Chat[]      @relation(name: "chatTo")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique //token을 뜻함 아래의 onDelete: Cascade는 User가 지워질때 자식인 Token도 지워진다는 의미! onDelete: SetNull은 User가 지워지면 user값을 null로 한다는 뜻!
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //userId는 ref id에서 User table에 있는 id 값이란걸 알 수 있음. 이를 통해서 token.user.name ==="Anonymous" 이게 됨!
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText // string으로 하면 varchar(191)만 쓸 수 있어서!
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[] // Fav, sales, purchases 를 합쳐놓은것!
  streams     Stream[]
  messages    Message[]

  @@index([userId])
}

// User에 의해 생성되고 이는 Product를 가리키게 되는 모델!
model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int

  @@index([userId, productId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  curiosity Curiosity[]

  @@index([userId])
}

// 이 answer는 post와도 (user만 있는게 아님) 연관이 있다. 왜냐면 post로 작성된 글에 답이 달리는 거기 때문에
model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([userId, postId])
}

model Curiosity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId, postId])
}

// Review는 작성자, 그리고 어디에다가 작성했는지 받는 사람이 나눠지기 때문에 서로다른 User가 필요하다. 이럴 prisma로 처리할때는 아래처럼 @relation에다가 name을 주어서 처리해야 한다!
model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)

  @@index([createdById, createdForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  price       Int
  description String    @db.MediumText
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
  Product     Product?  @relation(fields: [productId], references: [id])
  productId   Int?

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@index([userId, streamId])
}

// 위의 Fav, Purchase, Sale은 다 같은 모델의 형식인데 이름만 달라짐! 아래처럼하면 같이 사용할 수 있음.
model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind      String
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Chat {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatFrom   User     @relation(name: "chatFrom", fields: [chatFromId], references: [id], onDelete: Cascade)
  chatFromId Int
  chatTo     User     @relation(name: "chatTo", fields: [chatToId], references: [id], onDelete: Cascade)
  chatToId   Int
  talk       String   @db.LongText

  @@index([chatFromId, chatToId])
}

enum Kind {
  Purchase
  Sale
  Fav
}
